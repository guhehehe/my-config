# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="af-magic"
ZSH_THEME="bira"
ZSH_THEME="rkj-repos"
ZSH_THEME="gnzh"
ZSH_THEME="sorin"
ZSH_THEME="xiong-chiamiov-plus"
ZSH_THEME="fabulous"

# Which plugins would you like to load? (plugins can be found in
# ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git)

source $ZSH/oh-my-zsh.sh

export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

bindkey -v
bindkey "^W" backward-kill-word
bindkey "^?" backward-delete-char   # Control-h also deletes the previous char
bindkey "^H" backward-delete-char   # Control-h also deletes the previous char
bindkey "^U" backward-kill-line

export KEYTIMEOUT=1


#####################################################
#  Some workaround for the error that cc might cause,
#  due to some changes after Xcode 5.1.
#####################################################
export CFLAGS=-Qunused-arguments
export CPPFLAGS=-Qunused-arguments
export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future


#####################################################
#  Ruby setting? I forgot, probably necessary for
#  Octopress tools
#####################################################
export PATH=$PATH:~/npm/bin:~/local/bin

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"


#####################################################
#  Brew settings
#####################################################
export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"


#####################################################
#  Virtualenv setting
#####################################################
export WORKON_HOME=$HOME/envs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
source /usr/local/bin/virtualenvwrapper.sh


#####################################################
# iDefined settings
#####################################################
# Useful aliases
# Make MacVim default vim
alias vi='/Applications/MacVim.app/Contents/MacOS/Vim'
alias vim='vi'
alias ctags='/usr/local/bin/ctags'
alias ls='ls --color=always'

export CLICOLOR=YES

# Set vi
set -o vi

# Set terminal dir colors
eval `dircolors ~/.dircolors/dircolors`

function show_git_prompt() {
    _m="$FX[reset]$FG[064]M"          # Modification
    _u="$FX[reset]$FG[009]+"          # Untracked files
    _r="$FX[reset]$FG[130]R"          # Rename
    _d="$FX[reset]$FG[009]D"          # Deletion
    _n="$FX[reset]$FG[220]A"          # New file
    _o="$FX[reset]$FG[244]$FX[bold]|" # Status delimiter
    _b="$FX[reset]$FG[136]$FX[bold]"  # Branch
    _g="$FX[reset]$FG[130]$FX[bold]"  # git
    _a="$FX[reset]$FG[064]$FX[bold]"  # Commits ahead
    _h="$FX[reset]$FG[009]$FX[bold]"  # Commtis behind

    # Get the current branch
    _branch="$(command git rev-parse --abbrev-ref HEAD 2> /dev/null)"

    # Get the current status
    _statuses="$(command git status --porcelain 2> /dev/null |\
        awk '{print $1}' | uniq)"

    # Get commits ahead/behind
    _behind="$(command git rev-list --left-only @{u}... 2> /dev/null | wc -l)"
    _ahead="$(command git rev-list --right-only @{u}... 2> /dev/null | wc -l)"

    # Format the status
    _statuses=("${(f)_statuses}")   # Split new lines
    for _stat in ${_statuses}; do
        _status="${_status}${_stat}"
    done
    if [[ "${_status}" == *"??"* ]]; then
        if [[ -z "${_pretty_stat}" ]]; then
            _pretty_stat="${_pretty_stat}${_u}"
        else
            _pretty_stat="${_pretty_stat}${_o}${_u}"
        fi
    fi
    if [[ "${_status}" == *M* ]]; then
        if [[ -z "${_pretty_stat}" ]]; then
            _pretty_stat="${_pretty_stat}${_m}"
        else
            _pretty_stat="${_pretty_stat}${_o}${_m}"
        fi
    fi
    if [[ "${_status}" == *D* ]]; then
        if [[ -z "${_pretty_stat}" ]]; then
            _pretty_stat="${_pretty_stat}${_d}"
        else
            _pretty_stat="${_pretty_stat}${_o}${_d}"
        fi
    fi
    if [[ "${_status}" == *R* ]]; then
        if [[ -z "${_pretty_stat}" ]]; then
            _pretty_stat="${_pretty_stat}${_r}"
        else
            _pretty_stat="${_pretty_stat}${_o}${_r}"
        fi
    fi
    if [[ "${_status}" == *A* ]]; then
        if [[ -z "${_pretty_stat}" ]]; then
            _pretty_stat="${_pretty_stat}${_n}"
        else
            _pretty_stat="${_pretty_stat}${_o}${_n}"
        fi
    fi

    # Format commits ahead/behind
    if [[ ${_ahead} -ne 0 ]]; then
        _commit="${_a}↑${FX[reset]}${_ahead}${FX[reset]}"
    fi
    if [[ ${_behind} -ne 0 ]]; then
        _commit="${_h}↓${FX[reset]}${_behind}${FX[reset]}"
    fi

    # Format git prompt
    if [[ ! -z ${_branch} ]]; then
        git_prompt="${_g}git:(${_b}${_branch}${_g})"
    fi
    if [[ ! -z ${_pretty_stat} ]]; then
        _length=${#_pretty_stat}
        git_prompt="${git_prompt}(${_pretty_stat}${_g})"
    fi
    if [[ ! -z ${_commit} ]]; then
        git_prompt="${git_prompt}(${_commit}${_g})"
    fi

    echo ${git_prompt}
}
